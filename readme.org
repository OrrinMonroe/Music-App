# -*- mode: org -*-

* CS 235 Fall 2023 - Team Guava

** What is this?

This semester we will be working on a codebase as we learn new skills.
This codebase is meant to be similar to something like a Spotify platform,
and in particular will include nine main domains:

| Category  | Subcategory | Owner |
|-----------|-------------|-------|
| Music     | Album       |       |
| Music     | Track       |       |
| Music     | Artist      |       |
| Audiobook | Book        |       |
| Audiobook | Chapter     |       |
| Audiobook | Author      |       |
| Podcast   | Show        |       |
| Podcast   | Episode     |       |
| Podcast   | Creator     |       |

With the instructor acting as a sort of "team lead" or "software architect" role.

-----

** Working with a team?

Students will mostly be working independently on their own "area" of the codebase,
but you will want to keep in touch with teammates for:

- Asking for a *code review* on your *merge request*
- Collaborating, brain storming, etc. to implement your exercise features.

-----

** Grade notes
There will probably be people who drop out during the semester, but other students'
performance will not affect your grade, you will be graded based on your own work.

Any "positions" not filled, I will just bring in code from another group repository.

-----

** Git Quick Reference

*** Starting a new assignment
When working on a new assignment, make sure to do the following:

1. Make sure you've ADDED, COMMITTED, AND PUSHED all changes to your current branch, as applicable.
2. =git checkout main= to checkout the main branch.
3. =git pull= to grab the latest changes from the server.
4. Everything merged and updated? Good, now continue...
5. =git checkout -b name_assignment= to create a new branch to work on for the assignment. For example: =rsingh13_u07ex=.
6. Now you're good to start working!

*** Backing up changes
While working on your assignment you will periodically want to make backups
and perhaps even save your changes to the server. Follow these steps:

1. =git add *.TYPE= to add all items with the same extention (replace "TYPE" with "cpp", for example),
   or =git add .= to add all changed files.
2. =git commit -m "DESCRIPTION"=, but replace "DESCRIPTION" with an actual description of what you changed.
3. =git push -u origin BRANCHNAME= (optional) - you can do many commits before using the =push= command, but feel free to push your changes to the server for safe-keeping any time.

*** Switching between branches
Use =git branch= to view the available branches. You can then use =git checkout BRANCHNAME= to check out an existing branch.
Note that you'll see code files update or maybe "disappear" when changing branches - your changes are
still there, you just have to check out your old branch to get access to those files again.

-----
